#ifndef ITERATIVE_ESTIMATE_PARAMETERS_H_
#define ITERATIVE_ESTIMATE_PARAMETERS_H_
/**
 * \file iterativeEstimateParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from stereoAlign.xml
 */

#include "reflection/reflection.h"
#include "reflection/defaultSetter.h"
#include "reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Iterative Estimate Parameters 
 * Parameters for step by step convergence to solution. We make an estimation and throw out outliers, then throw away again 
 **/
class IterativeEstimateParameters : public corecvs::BaseReflection<IterativeEstimateParameters>
{
public:
    enum FieldId {
        LIMIT_SAMPLES_ID,
        ITERATIONS_NUMBER_ID,
        USE_INITIAL_ID,
        INITIAL_SIGMA_ID,
        SIGMA_FACTOR_ID,
        ITERATIVE_ESTIMATE_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Limit Samples 
     * Limit Samples 
     */
    int mLimitSamples;

    /** 
     * \brief Iterations Number 
     * Iterations Number 
     */
    int mIterationsNumber;

    /** 
     * \brief Use initial 
     * Use initial 
     */
    bool mUseInitial;

    /** 
     * \brief Initial Sigma 
     * Initial Sigma 
     */
    double mInitialSigma;

    /** 
     * \brief Sigma Factor 
     * Sigma Factor 
     */
    double mSigmaFactor;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    int limitSamples() const
    {
        return mLimitSamples;
    }

    int iterationsNumber() const
    {
        return mIterationsNumber;
    }

    bool useInitial() const
    {
        return mUseInitial;
    }

    double initialSigma() const
    {
        return mInitialSigma;
    }

    double sigmaFactor() const
    {
        return mSigmaFactor;
    }

    /** Section with setters */
    void setLimitSamples(int limitSamples)
    {
        mLimitSamples = limitSamples;
    }

    void setIterationsNumber(int iterationsNumber)
    {
        mIterationsNumber = iterationsNumber;
    }

    void setUseInitial(bool useInitial)
    {
        mUseInitial = useInitial;
    }

    void setInitialSigma(double initialSigma)
    {
        mInitialSigma = initialSigma;
    }

    void setSigmaFactor(double sigmaFactor)
    {
        mSigmaFactor = sigmaFactor;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mLimitSamples,              static_cast<const corecvs::IntField *>(fields()[LIMIT_SAMPLES_ID]));
        visitor.visit(mIterationsNumber,          static_cast<const corecvs::IntField *>(fields()[ITERATIONS_NUMBER_ID]));
        visitor.visit(mUseInitial,                static_cast<const corecvs::BoolField *>(fields()[USE_INITIAL_ID]));
        visitor.visit(mInitialSigma,              static_cast<const corecvs::DoubleField *>(fields()[INITIAL_SIGMA_ID]));
        visitor.visit(mSigmaFactor,               static_cast<const corecvs::DoubleField *>(fields()[SIGMA_FACTOR_ID]));
    }

    IterativeEstimateParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    IterativeEstimateParameters(
          int limitSamples
        , int iterationsNumber
        , bool useInitial
        , double initialSigma
        , double sigmaFactor
    )
    {
        mLimitSamples = limitSamples;
        mIterationsNumber = iterationsNumber;
        mUseInitial = useInitial;
        mInitialSigma = initialSigma;
        mSigmaFactor = sigmaFactor;
    }

    /** Exact match comparator **/ 
    bool operator ==(const IterativeEstimateParameters &other) const 
    {
        if ( !(this->mLimitSamples == other.mLimitSamples)) return false;
        if ( !(this->mIterationsNumber == other.mIterationsNumber)) return false;
        if ( !(this->mUseInitial == other.mUseInitial)) return false;
        if ( !(this->mInitialSigma == other.mInitialSigma)) return false;
        if ( !(this->mSigmaFactor == other.mSigmaFactor)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, IterativeEstimateParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //ITERATIVE_ESTIMATE_PARAMETERS_H_
