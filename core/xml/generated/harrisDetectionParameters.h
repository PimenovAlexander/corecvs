#ifndef HARRIS_DETECTION_PARAMETERS_H_
#define HARRIS_DETECTION_PARAMETERS_H_
/**
 * \file harrisDetectionParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from parameters.xml
 */

#include "reflection/reflection.h"
#include "reflection/defaultSetter.h"
#include "reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief harris Detection Parameters 
 * harris Detection Parameters 
 **/
class HarrisDetectionParameters : public corecvs::BaseReflection<HarrisDetectionParameters>
{
public:
    enum FieldId {
        SCALER_ID,
        APPERTURE_ID,
        HARRIS_DETECTION_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief scaler 
     * scaler 
     */
    double mScaler;

    /** 
     * \brief apperture 
     * apperture 
     */
    int mApperture;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double scaler() const
    {
        return mScaler;
    }

    int apperture() const
    {
        return mApperture;
    }

    /** Section with setters */
    void setScaler(double scaler)
    {
        mScaler = scaler;
    }

    void setApperture(int apperture)
    {
        mApperture = apperture;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mScaler,                    static_cast<const corecvs::DoubleField *>(fields()[SCALER_ID]));
        visitor.visit(mApperture,                 static_cast<const corecvs::IntField *>(fields()[APPERTURE_ID]));
    }

    HarrisDetectionParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    HarrisDetectionParameters(
          double scaler
        , int apperture
    )
    {
        mScaler = scaler;
        mApperture = apperture;
    }

    /** Exact match comparator **/ 
    bool operator ==(const HarrisDetectionParameters &other) const 
    {
        if ( !(this->mScaler == other.mScaler)) return false;
        if ( !(this->mApperture == other.mApperture)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, HarrisDetectionParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //HARRIS_DETECTION_PARAMETERS_H_
