#ifndef MASKING_PARAMETERS_H_
#define MASKING_PARAMETERS_H_
/**
 * \file maskingParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from bufferFilters.xml
 */

#include "reflection/reflection.h"
#include "reflection/defaultSetter.h"
#include "reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Masking Parameters 
 * Masking Parameters 
 **/
class MaskingParameters : public corecvs::BaseReflection<MaskingParameters>
{
public:
    enum FieldId {
        INVERT_ID,
        MASKING_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Invert 
     * Invert 
     */
    bool mInvert;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    bool invert() const
    {
        return mInvert;
    }

    /** Section with setters */
    void setInvert(bool invert)
    {
        mInvert = invert;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mInvert,                    static_cast<const corecvs::BoolField *>(fields()[INVERT_ID]));
    }

    MaskingParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    MaskingParameters(
          bool invert
    )
    {
        mInvert = invert;
    }

    /** Exact match comparator **/ 
    bool operator ==(const MaskingParameters &other) const 
    {
        if ( !(this->mInvert == other.mInvert)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, MaskingParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //MASKING_PARAMETERS_H_
