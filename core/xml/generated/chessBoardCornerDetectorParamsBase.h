#ifndef CHESS_BOARD_CORNER_DETECTOR_PARAMS_BASE_H_
#define CHESS_BOARD_CORNER_DETECTOR_PARAMS_BASE_H_
/**
 * \file chessBoardCornerDetectorParamsBase.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from patternDetector.xml
 */

#include "reflection/reflection.h"
#include "reflection/defaultSetter.h"
#include "reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Chess Board Corner Detector Params Base 
 * Chess Board Corner Detector Params Base 
 **/
class ChessBoardCornerDetectorParamsBase : public corecvs::BaseReflection<ChessBoardCornerDetectorParamsBase>
{
public:
    enum FieldId {
        PRODUCEDEBUG_ID,
        FLOATSPEEDUP_ID,
        NORMALIZEPERCENTILE_ID,
        SECTORSIZEDEG_ID,
        HISTOGRAMBINS_ID,
        MINANGLEDEG_ID,
        NEIGHBORHOOD_ID,
        GRADTHRESHOLD_ID,
        ORIENTATIONINLIERTHRESHOLD_ID,
        INLIERDISTANCETHRESHOLD_ID,
        UPDATETHRESHOLD_ID,
        SCORETHRESHOLD_ID,
        NROUNDS_ID,
        MEANSHIFTBANDWIDTH_ID,
        NMSLOCALITY_ID,
        NMSTHRESHOLD_ID,
        PATTERNRADIUS_ID,
        PATTERNSTARTANGLEDEG_ID,
        CORNERSCORES_ID,
        CHESS_BOARD_CORNER_DETECTOR_PARAMS_BASE_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief produceDebug 
     * produceDebug 
     */
    bool mProduceDebug;

    /** 
     * \brief floatSpeedup 
     * floatSpeedup 
     */
    bool mFloatSpeedup;

    /** 
     * \brief normalizePercentile 
     * Brightness percentile to be cut 
     */
    double mNormalizePercentile;

    /** 
     * \brief sectorSizeDeg 
     * Sector size in deg 
     */
    double mSectorSizeDeg;

    /** 
     * \brief histogramBins 
     * Number of bins for computing edge direction histogram 
     */
    int mHistogramBins;

    /** 
     * \brief minAngleDeg 
     * Minimal angle between edges in deg 
     */
    double mMinAngleDeg;

    /** 
     * \brief neighborhood 
     * Typical radius for estimating edge-related data and refinig corner positions 
     */
    int mNeighborhood;

    /** 
     * \brief gradThreshold 
     * Gradient magnitude threshold 
     */
    double mGradThreshold;

    /** 
     * \brief orientationInlierThreshold 
     * Gradient orientation inlier threshold 
     */
    double mOrientationInlierThreshold;

    /** 
     * \brief inlierDistanceThreshold 
     * Threshold for distance to edge 
     */
    double mInlierDistanceThreshold;

    /** 
     * \brief updateThreshold 
     * Threshold for maximal corner-position update 
     */
    double mUpdateThreshold;

    /** 
     * \brief scoreThreshold 
     * Threshold for final score 
     */
    double mScoreThreshold;

    /** 
     * \brief nRounds 
     * Number of orientation/position refinement rounds 
     */
    int mNRounds;

    /** 
     * \brief meanshiftBandwidth 
     * Meanshift smoothing stdev 
     */
    double mMeanshiftBandwidth;

    /** 
     * \brief nmsLocality 
     * Non Minimal Supresstion locality area 
     */
    int mNmsLocality;

    /** 
     * \brief nmsThreshold 
     * Non Minimal Supresstion threshold 
     */
    double mNmsThreshold;

    /** 
     * \brief patternRadius 
     * Radius for multi-scale pattern detection 
     */
    vector<double> mPatternRadius;

    /** 
     * \brief patternStartAngleDeg 
     * Angle for rotation-variant detection 
     */
    vector<double> mPatternStartAngleDeg;

    /** 
     * \brief cornerScores 
     * Radius for corner-scoring 
     */
    vector<double> mCornerScores;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    bool produceDebug() const
    {
        return mProduceDebug;
    }

    bool floatSpeedup() const
    {
        return mFloatSpeedup;
    }

    double normalizePercentile() const
    {
        return mNormalizePercentile;
    }

    double sectorSizeDeg() const
    {
        return mSectorSizeDeg;
    }

    int histogramBins() const
    {
        return mHistogramBins;
    }

    double minAngleDeg() const
    {
        return mMinAngleDeg;
    }

    int neighborhood() const
    {
        return mNeighborhood;
    }

    double gradThreshold() const
    {
        return mGradThreshold;
    }

    double orientationInlierThreshold() const
    {
        return mOrientationInlierThreshold;
    }

    double inlierDistanceThreshold() const
    {
        return mInlierDistanceThreshold;
    }

    double updateThreshold() const
    {
        return mUpdateThreshold;
    }

    double scoreThreshold() const
    {
        return mScoreThreshold;
    }

    int nRounds() const
    {
        return mNRounds;
    }

    double meanshiftBandwidth() const
    {
        return mMeanshiftBandwidth;
    }

    int nmsLocality() const
    {
        return mNmsLocality;
    }

    double nmsThreshold() const
    {
        return mNmsThreshold;
    }

    vector<double> patternRadius() const
    {
        return mPatternRadius;
    }

    vector<double> patternStartAngleDeg() const
    {
        return mPatternStartAngleDeg;
    }

    vector<double> cornerScores() const
    {
        return mCornerScores;
    }

    /** Section with setters */
    void setProduceDebug(bool produceDebug)
    {
        mProduceDebug = produceDebug;
    }

    void setFloatSpeedup(bool floatSpeedup)
    {
        mFloatSpeedup = floatSpeedup;
    }

    void setNormalizePercentile(double normalizePercentile)
    {
        mNormalizePercentile = normalizePercentile;
    }

    void setSectorSizeDeg(double sectorSizeDeg)
    {
        mSectorSizeDeg = sectorSizeDeg;
    }

    void setHistogramBins(int histogramBins)
    {
        mHistogramBins = histogramBins;
    }

    void setMinAngleDeg(double minAngleDeg)
    {
        mMinAngleDeg = minAngleDeg;
    }

    void setNeighborhood(int neighborhood)
    {
        mNeighborhood = neighborhood;
    }

    void setGradThreshold(double gradThreshold)
    {
        mGradThreshold = gradThreshold;
    }

    void setOrientationInlierThreshold(double orientationInlierThreshold)
    {
        mOrientationInlierThreshold = orientationInlierThreshold;
    }

    void setInlierDistanceThreshold(double inlierDistanceThreshold)
    {
        mInlierDistanceThreshold = inlierDistanceThreshold;
    }

    void setUpdateThreshold(double updateThreshold)
    {
        mUpdateThreshold = updateThreshold;
    }

    void setScoreThreshold(double scoreThreshold)
    {
        mScoreThreshold = scoreThreshold;
    }

    void setNRounds(int nRounds)
    {
        mNRounds = nRounds;
    }

    void setMeanshiftBandwidth(double meanshiftBandwidth)
    {
        mMeanshiftBandwidth = meanshiftBandwidth;
    }

    void setNmsLocality(int nmsLocality)
    {
        mNmsLocality = nmsLocality;
    }

    void setNmsThreshold(double nmsThreshold)
    {
        mNmsThreshold = nmsThreshold;
    }

    void setPatternRadius(vector<double> patternRadius)
    {
        mPatternRadius = patternRadius;
    }

    void setPatternStartAngleDeg(vector<double> patternStartAngleDeg)
    {
        mPatternStartAngleDeg = patternStartAngleDeg;
    }

    void setCornerScores(vector<double> cornerScores)
    {
        mCornerScores = cornerScores;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mProduceDebug,              static_cast<const corecvs::BoolField *>(fields()[PRODUCEDEBUG_ID]));
        visitor.visit(mFloatSpeedup,              static_cast<const corecvs::BoolField *>(fields()[FLOATSPEEDUP_ID]));
        visitor.visit(mNormalizePercentile,       static_cast<const corecvs::DoubleField *>(fields()[NORMALIZEPERCENTILE_ID]));
        visitor.visit(mSectorSizeDeg,             static_cast<const corecvs::DoubleField *>(fields()[SECTORSIZEDEG_ID]));
        visitor.visit(mHistogramBins,             static_cast<const corecvs::IntField *>(fields()[HISTOGRAMBINS_ID]));
        visitor.visit(mMinAngleDeg,               static_cast<const corecvs::DoubleField *>(fields()[MINANGLEDEG_ID]));
        visitor.visit(mNeighborhood,              static_cast<const corecvs::IntField *>(fields()[NEIGHBORHOOD_ID]));
        visitor.visit(mGradThreshold,             static_cast<const corecvs::DoubleField *>(fields()[GRADTHRESHOLD_ID]));
        visitor.visit(mOrientationInlierThreshold, static_cast<const corecvs::DoubleField *>(fields()[ORIENTATIONINLIERTHRESHOLD_ID]));
        visitor.visit(mInlierDistanceThreshold,   static_cast<const corecvs::DoubleField *>(fields()[INLIERDISTANCETHRESHOLD_ID]));
        visitor.visit(mUpdateThreshold,           static_cast<const corecvs::DoubleField *>(fields()[UPDATETHRESHOLD_ID]));
        visitor.visit(mScoreThreshold,            static_cast<const corecvs::DoubleField *>(fields()[SCORETHRESHOLD_ID]));
        visitor.visit(mNRounds,                   static_cast<const corecvs::IntField *>(fields()[NROUNDS_ID]));
        visitor.visit(mMeanshiftBandwidth,        static_cast<const corecvs::DoubleField *>(fields()[MEANSHIFTBANDWIDTH_ID]));
        visitor.visit(mNmsLocality,               static_cast<const corecvs::IntField *>(fields()[NMSLOCALITY_ID]));
        visitor.visit(mNmsThreshold,              static_cast<const corecvs::DoubleField *>(fields()[NMSTHRESHOLD_ID]));
        visitor.visit(mPatternRadius,             static_cast<const corecvs::DoubleVectorField *>(fields()[PATTERNRADIUS_ID]));
        visitor.visit(mPatternStartAngleDeg,      static_cast<const corecvs::DoubleVectorField *>(fields()[PATTERNSTARTANGLEDEG_ID]));
        visitor.visit(mCornerScores,              static_cast<const corecvs::DoubleVectorField *>(fields()[CORNERSCORES_ID]));
    }

    ChessBoardCornerDetectorParamsBase()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    ChessBoardCornerDetectorParamsBase(
          bool produceDebug
        , bool floatSpeedup
        , double normalizePercentile
        , double sectorSizeDeg
        , int histogramBins
        , double minAngleDeg
        , int neighborhood
        , double gradThreshold
        , double orientationInlierThreshold
        , double inlierDistanceThreshold
        , double updateThreshold
        , double scoreThreshold
        , int nRounds
        , double meanshiftBandwidth
        , int nmsLocality
        , double nmsThreshold
        , vector<double> patternRadius
        , vector<double> patternStartAngleDeg
        , vector<double> cornerScores
    )
    {
        mProduceDebug = produceDebug;
        mFloatSpeedup = floatSpeedup;
        mNormalizePercentile = normalizePercentile;
        mSectorSizeDeg = sectorSizeDeg;
        mHistogramBins = histogramBins;
        mMinAngleDeg = minAngleDeg;
        mNeighborhood = neighborhood;
        mGradThreshold = gradThreshold;
        mOrientationInlierThreshold = orientationInlierThreshold;
        mInlierDistanceThreshold = inlierDistanceThreshold;
        mUpdateThreshold = updateThreshold;
        mScoreThreshold = scoreThreshold;
        mNRounds = nRounds;
        mMeanshiftBandwidth = meanshiftBandwidth;
        mNmsLocality = nmsLocality;
        mNmsThreshold = nmsThreshold;
        mPatternRadius = patternRadius;
        mPatternStartAngleDeg = patternStartAngleDeg;
        mCornerScores = cornerScores;
    }

    /** Exact match comparator **/ 
    bool operator ==(const ChessBoardCornerDetectorParamsBase &other) const 
    {
        if ( !(this->mProduceDebug == other.mProduceDebug)) return false;
        if ( !(this->mFloatSpeedup == other.mFloatSpeedup)) return false;
        if ( !(this->mNormalizePercentile == other.mNormalizePercentile)) return false;
        if ( !(this->mSectorSizeDeg == other.mSectorSizeDeg)) return false;
        if ( !(this->mHistogramBins == other.mHistogramBins)) return false;
        if ( !(this->mMinAngleDeg == other.mMinAngleDeg)) return false;
        if ( !(this->mNeighborhood == other.mNeighborhood)) return false;
        if ( !(this->mGradThreshold == other.mGradThreshold)) return false;
        if ( !(this->mOrientationInlierThreshold == other.mOrientationInlierThreshold)) return false;
        if ( !(this->mInlierDistanceThreshold == other.mInlierDistanceThreshold)) return false;
        if ( !(this->mUpdateThreshold == other.mUpdateThreshold)) return false;
        if ( !(this->mScoreThreshold == other.mScoreThreshold)) return false;
        if ( !(this->mNRounds == other.mNRounds)) return false;
        if ( !(this->mMeanshiftBandwidth == other.mMeanshiftBandwidth)) return false;
        if ( !(this->mNmsLocality == other.mNmsLocality)) return false;
        if ( !(this->mNmsThreshold == other.mNmsThreshold)) return false;
        if ( !(this->mPatternRadius == other.mPatternRadius)) return false;
        if ( !(this->mPatternStartAngleDeg == other.mPatternStartAngleDeg)) return false;
        if ( !(this->mCornerScores == other.mCornerScores)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, ChessBoardCornerDetectorParamsBase &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //CHESS_BOARD_CORNER_DETECTOR_PARAMS_BASE_H_
