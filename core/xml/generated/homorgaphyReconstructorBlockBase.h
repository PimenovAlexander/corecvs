#ifndef HOMORGAPHYRECONSTRUCTORBLOCKBASE_H_
#define HOMORGAPHYRECONSTRUCTORBLOCKBASE_H_
/**
 * \file homorgaphyReconstructorBlockBase.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from bufferFilters.xml
 */

#include "reflection/reflection.h"
#include "reflection/defaultSetter.h"
#include "reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
namespace corecvs {
class CorrespondenceList;
}
namespace corecvs {
class Matrix33;
}
// }
/*
 *  Additional includes for enum section.
 */
#include "xml/generated/homographyAlgorithm.h"

/**
 * \brief HomorgaphyReconstructorBlockBase 
 * HomorgaphyReconstructorBlockBase 
 **/
class HomorgaphyReconstructorBlockBase : public corecvs::BaseReflection<HomorgaphyReconstructorBlockBase>
{
public:
    enum FieldId {
        IN0_ID,
        OUT0_ID,
        ALGORITHM_ID,
        HOMORGAPHYRECONSTRUCTORBLOCKBASE_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief in0 
     * in0 
     */
    corecvs::CorrespondenceList * mIn0;

    /** 
     * \brief out0 
     * out0 
     */
    corecvs::Matrix33 * mOut0;

    /** 
     * \brief algorithm 
     * algorithm 
     */
    int mAlgorithm;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    corecvs::CorrespondenceList * in0() const
    {
        return mIn0;
    }

    corecvs::Matrix33 * out0() const
    {
        return mOut0;
    }

    HomographyAlgorithm::HomographyAlgorithm algorithm() const
    {
        return static_cast<HomographyAlgorithm::HomographyAlgorithm>(mAlgorithm);
    }

    /** Section with setters */
    void setIn0(corecvs::CorrespondenceList * in0)
    {
        mIn0 = in0;
    }

    void setOut0(corecvs::Matrix33 * out0)
    {
        mOut0 = out0;
    }

    void setAlgorithm(HomographyAlgorithm::HomographyAlgorithm algorithm)
    {
        mAlgorithm = algorithm;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit((void * &)mIn0,             static_cast<const corecvs::PointerField *>(fields()[IN0_ID]));
        visitor.visit((void * &)mOut0,            static_cast<const corecvs::PointerField *>(fields()[OUT0_ID]));
        visitor.visit((int &)mAlgorithm,          static_cast<const corecvs::EnumField *>(fields()[ALGORITHM_ID]));
    }

    HomorgaphyReconstructorBlockBase()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    HomorgaphyReconstructorBlockBase(
          corecvs::CorrespondenceList * in0
        , corecvs::Matrix33 * out0
        , HomographyAlgorithm::HomographyAlgorithm algorithm
    )
    {
        mIn0 = in0;
        mOut0 = out0;
        mAlgorithm = algorithm;
    }

    /** Exact match comparator **/ 
    bool operator ==(const HomorgaphyReconstructorBlockBase &other) const 
    {
        if ( !(this->mAlgorithm == other.mAlgorithm)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, HomorgaphyReconstructorBlockBase &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //HOMORGAPHYRECONSTRUCTORBLOCKBASE_H_
