#ifndef FOCUS_ESTIMATION_RESULT_H_
#define FOCUS_ESTIMATION_RESULT_H_
/**
 * \file focusEstimationResult.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from parameters.xml
 */

#include "reflection/reflection.h"
#include "reflection/defaultSetter.h"
#include "reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Focus Estimation Result 
 * Focus Estimation Result 
 **/
class FocusEstimationResult : public corecvs::BaseReflection<FocusEstimationResult>
{
public:
    enum FieldId {
        SCORE_ID,
        SCOREROI_ID,
        FULLSCORE_ID,
        BOARDPROCESSED_ID,
        BNOISE_ID,
        WNOISE_ID,
        SHARPNESS_ID,
        FOCUS_ESTIMATION_RESULT_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief score 
     * result for the whole image 
     */
    int mScore;

    /** 
     * \brief scoreROI 
     * result for the chosen rectangular ROI 
     */
    int mScoreROI;

    /** 
     * \brief fullScore 
     * result for the full image 
     */
    int mFullScore;

    /** 
     * \brief boardProcessed 
     * boardProcessed 
     */
    bool mBoardProcessed;

    /** 
     * \brief bnoise 
     * amount of noise on black parts of the board (per pixel) 
     */
    double mBnoise;

    /** 
     * \brief wnoise 
     * amount of noise on white parts of the board (per pixel) 
     */
    double mWnoise;

    /** 
     * \brief sharpness 
     * sharpness per pixel 
     */
    double mSharpness;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    int score() const
    {
        return mScore;
    }

    int scoreROI() const
    {
        return mScoreROI;
    }

    int fullScore() const
    {
        return mFullScore;
    }

    bool boardProcessed() const
    {
        return mBoardProcessed;
    }

    double bnoise() const
    {
        return mBnoise;
    }

    double wnoise() const
    {
        return mWnoise;
    }

    double sharpness() const
    {
        return mSharpness;
    }

    /** Section with setters */
    void setScore(int score)
    {
        mScore = score;
    }

    void setScoreROI(int scoreROI)
    {
        mScoreROI = scoreROI;
    }

    void setFullScore(int fullScore)
    {
        mFullScore = fullScore;
    }

    void setBoardProcessed(bool boardProcessed)
    {
        mBoardProcessed = boardProcessed;
    }

    void setBnoise(double bnoise)
    {
        mBnoise = bnoise;
    }

    void setWnoise(double wnoise)
    {
        mWnoise = wnoise;
    }

    void setSharpness(double sharpness)
    {
        mSharpness = sharpness;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mScore,                     static_cast<const corecvs::IntField *>(fields()[SCORE_ID]));
        visitor.visit(mScoreROI,                  static_cast<const corecvs::IntField *>(fields()[SCOREROI_ID]));
        visitor.visit(mFullScore,                 static_cast<const corecvs::IntField *>(fields()[FULLSCORE_ID]));
        visitor.visit(mBoardProcessed,            static_cast<const corecvs::BoolField *>(fields()[BOARDPROCESSED_ID]));
        visitor.visit(mBnoise,                    static_cast<const corecvs::DoubleField *>(fields()[BNOISE_ID]));
        visitor.visit(mWnoise,                    static_cast<const corecvs::DoubleField *>(fields()[WNOISE_ID]));
        visitor.visit(mSharpness,                 static_cast<const corecvs::DoubleField *>(fields()[SHARPNESS_ID]));
    }

    FocusEstimationResult()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    FocusEstimationResult(
          int score
        , int scoreROI
        , int fullScore
        , bool boardProcessed
        , double bnoise
        , double wnoise
        , double sharpness
    )
    {
        mScore = score;
        mScoreROI = scoreROI;
        mFullScore = fullScore;
        mBoardProcessed = boardProcessed;
        mBnoise = bnoise;
        mWnoise = wnoise;
        mSharpness = sharpness;
    }

    /** Exact match comparator **/ 
    bool operator ==(const FocusEstimationResult &other) const 
    {
        if ( !(this->mScore == other.mScore)) return false;
        if ( !(this->mScoreROI == other.mScoreROI)) return false;
        if ( !(this->mFullScore == other.mFullScore)) return false;
        if ( !(this->mBoardProcessed == other.mBoardProcessed)) return false;
        if ( !(this->mBnoise == other.mBnoise)) return false;
        if ( !(this->mWnoise == other.mWnoise)) return false;
        if ( !(this->mSharpness == other.mSharpness)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, FocusEstimationResult &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //FOCUS_ESTIMATION_RESULT_H_
