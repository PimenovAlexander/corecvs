#ifndef PATTERN_DETECTOR_RESULT_BASE_H_
#define PATTERN_DETECTOR_RESULT_BASE_H_
/**
 * \file patternDetectorResultBase.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from parameters.xml
 */

#include "reflection/reflection.h"
#include "reflection/defaultSetter.h"
#include "reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */
#include "xml/generated/vector2dParameters.h"

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief pattern Detector Result Base 
 * pattern Detector Result Base 
 **/
class PatternDetectorResultBase : public corecvs::BaseReflection<PatternDetectorResultBase>
{
public:
    enum FieldId {
        POSITION_ID,
        ORTX_ID,
        ORTY_ID,
        UNITYPOINT_ID,
        ID_ID,
        PATTERN_DETECTOR_RESULT_BASE_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief position 
     * Resulting pattern position 
     */
    Vector2dParameters mPosition;

    /** 
     * \brief ortX 
     * One of resulting pattern directions in image coordinate 
     */
    Vector2dParameters mOrtX;

    /** 
     * \brief ortY 
     * Second resulting pattern direction in image coordinate  
     */
    Vector2dParameters mOrtY;

    /** 
     * \brief unityPoint 
     * Point that corresponds to (1,1 point on the pattern) 
     */
    Vector2dParameters mUnityPoint;

    /** 
     * \brief id 
     * pattern id  
     */
    int mId;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    Vector2dParameters position() const
    {
        return mPosition;
    }

    Vector2dParameters ortX() const
    {
        return mOrtX;
    }

    Vector2dParameters ortY() const
    {
        return mOrtY;
    }

    Vector2dParameters unityPoint() const
    {
        return mUnityPoint;
    }

    int id() const
    {
        return mId;
    }

    /** Section with setters */
    void setPosition(Vector2dParameters const &position)
    {
        mPosition = position;
    }

    void setOrtX(Vector2dParameters const &ortX)
    {
        mOrtX = ortX;
    }

    void setOrtY(Vector2dParameters const &ortY)
    {
        mOrtY = ortY;
    }

    void setUnityPoint(Vector2dParameters const &unityPoint)
    {
        mUnityPoint = unityPoint;
    }

    void setId(int id)
    {
        mId = id;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mPosition,                  static_cast<const corecvs::CompositeField *>(fields()[POSITION_ID]));
        visitor.visit(mOrtX,                      static_cast<const corecvs::CompositeField *>(fields()[ORTX_ID]));
        visitor.visit(mOrtY,                      static_cast<const corecvs::CompositeField *>(fields()[ORTY_ID]));
        visitor.visit(mUnityPoint,                static_cast<const corecvs::CompositeField *>(fields()[UNITYPOINT_ID]));
        visitor.visit(mId,                        static_cast<const corecvs::IntField *>(fields()[ID_ID]));
    }

    PatternDetectorResultBase()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    PatternDetectorResultBase(
          Vector2dParameters position
        , Vector2dParameters ortX
        , Vector2dParameters ortY
        , Vector2dParameters unityPoint
        , int id
    )
    {
        mPosition = position;
        mOrtX = ortX;
        mOrtY = ortY;
        mUnityPoint = unityPoint;
        mId = id;
    }

    /** Exact match comparator **/ 
    bool operator ==(const PatternDetectorResultBase &other) const 
    {
        if ( !(this->mPosition == other.mPosition)) return false;
        if ( !(this->mOrtX == other.mOrtX)) return false;
        if ( !(this->mOrtY == other.mOrtY)) return false;
        if ( !(this->mUnityPoint == other.mUnityPoint)) return false;
        if ( !(this->mId == other.mId)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, PatternDetectorResultBase &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //PATTERN_DETECTOR_RESULT_BASE_H_
