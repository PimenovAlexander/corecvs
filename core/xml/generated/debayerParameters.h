#ifndef DEBAYER_PARAMETERS_H_
#define DEBAYER_PARAMETERS_H_
/**
 * \file debayerParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from parameters.xml
 */

#include "reflection/reflection.h"
#include "reflection/defaultSetter.h"
#include "reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */
#include "xml/generated/debayerMethod.h"

/**
 * \brief Debayer Parameters 
 * Debayer Parameters 
 **/
class DebayerParameters : public corecvs::BaseReflection<DebayerParameters>
{
public:
    enum FieldId {
        METHOD_ID,
        BAYER_POS_ID,
        NUMBITSOUT_ID,
        GAINS_ID,
        GAMMA_ID,
        DEBAYER_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Method 
     * Method 
     */
    int mMethod;

    /** 
     * \brief Bayer pos 
     * Bayer pos 
     */
    int mBayerPos;

    /** 
     * \brief numBitsOut 
     * numBitsOut 
     */
    int mNumBitsOut;

    /** 
     * \brief gains 
     * RGB gains 
     */
    vector<double> mGains;

    /** 
     * \brief gamma 
     * Gamma values 
     */
    vector<double> mGamma;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    DebayerMethod::DebayerMethod method() const
    {
        return static_cast<DebayerMethod::DebayerMethod>(mMethod);
    }

    int bayerPos() const
    {
        return mBayerPos;
    }

    int numBitsOut() const
    {
        return mNumBitsOut;
    }

    vector<double> gains() const
    {
        return mGains;
    }

    vector<double> gamma() const
    {
        return mGamma;
    }

    /** Section with setters */
    void setMethod(DebayerMethod::DebayerMethod method)
    {
        mMethod = method;
    }

    void setBayerPos(int bayerPos)
    {
        mBayerPos = bayerPos;
    }

    void setNumBitsOut(int numBitsOut)
    {
        mNumBitsOut = numBitsOut;
    }

    void setGains(vector<double> gains)
    {
        mGains = gains;
    }

    void setGamma(vector<double> gamma)
    {
        mGamma = gamma;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit((int &)mMethod,             static_cast<const corecvs::EnumField *>(fields()[METHOD_ID]));
        visitor.visit(mBayerPos,                  static_cast<const corecvs::IntField *>(fields()[BAYER_POS_ID]));
        visitor.visit(mNumBitsOut,                static_cast<const corecvs::IntField *>(fields()[NUMBITSOUT_ID]));
        visitor.visit(mGains,                     static_cast<const corecvs::DoubleVectorField *>(fields()[GAINS_ID]));
        visitor.visit(mGamma,                     static_cast<const corecvs::DoubleVectorField *>(fields()[GAMMA_ID]));
    }

    DebayerParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    DebayerParameters(
          DebayerMethod::DebayerMethod method
        , int bayerPos
        , int numBitsOut
        , vector<double> gains
        , vector<double> gamma
    )
    {
        mMethod = method;
        mBayerPos = bayerPos;
        mNumBitsOut = numBitsOut;
        mGains = gains;
        mGamma = gamma;
    }

    /** Exact match comparator **/ 
    bool operator ==(const DebayerParameters &other) const 
    {
        if ( !(this->mMethod == other.mMethod)) return false;
        if ( !(this->mBayerPos == other.mBayerPos)) return false;
        if ( !(this->mNumBitsOut == other.mNumBitsOut)) return false;
        if ( !(this->mGains == other.mGains)) return false;
        if ( !(this->mGamma == other.mGamma)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, DebayerParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //DEBAYER_PARAMETERS_H_
