#ifndef PINHOLE_CAMERA_INTRINSICS_BASE_PARAMETERS_H_
#define PINHOLE_CAMERA_INTRINSICS_BASE_PARAMETERS_H_
/**
 * \file pinholeCameraIntrinsicsBaseParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from projections.xml
 */

#include "reflection/reflection.h"
#include "reflection/defaultSetter.h"
#include "reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */
#include "xml/generated/vector2dParameters.h"

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Pinhole Camera Intrinsics Base Parameters 
 * Pinhole Camera Intrinsics Base Parameters 
 **/
class PinholeCameraIntrinsicsBaseParameters : public corecvs::BaseReflection<PinholeCameraIntrinsicsBaseParameters>
{
public:
    enum FieldId {
        FX_ID,
        FY_ID,
        CX_ID,
        CY_ID,
        SKEW_ID,
        SIZE_ID,
        DISTORTEDSIZE_ID,
        PINHOLE_CAMERA_INTRINSICS_BASE_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief focalX 
     * focalX 
     */
    double mFx;

    /** 
     * \brief focalY 
     * focalY 
     */
    double mFy;

    /** 
     * \brief principalX 
     * The center of projection \f$x_c\f$ 
     */
    double mCx;

    /** 
     * \brief principalY 
     * The center of projection \f$y_c\f$ 
     */
    double mCy;

    /** 
     * \brief skew 
     * skew 
     */
    double mSkew;

    /** 
     * \brief size 
     * Model image resolution 
     */
    Vector2dParameters mSize;

    /** 
     * \brief distortedSize 
     * Source image resolution 
     */
    Vector2dParameters mDistortedSize;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double fx() const
    {
        return mFx;
    }

    double fy() const
    {
        return mFy;
    }

    double cx() const
    {
        return mCx;
    }

    double cy() const
    {
        return mCy;
    }

    double skew() const
    {
        return mSkew;
    }

    Vector2dParameters size() const
    {
        return mSize;
    }

    Vector2dParameters distortedSize() const
    {
        return mDistortedSize;
    }

    /** Section with setters */
    void setFx(double fx)
    {
        mFx = fx;
    }

    void setFy(double fy)
    {
        mFy = fy;
    }

    void setCx(double cx)
    {
        mCx = cx;
    }

    void setCy(double cy)
    {
        mCy = cy;
    }

    void setSkew(double skew)
    {
        mSkew = skew;
    }

    void setSize(Vector2dParameters const &size)
    {
        mSize = size;
    }

    void setDistortedSize(Vector2dParameters const &distortedSize)
    {
        mDistortedSize = distortedSize;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mFx,                        static_cast<const corecvs::DoubleField *>(fields()[FX_ID]));
        visitor.visit(mFy,                        static_cast<const corecvs::DoubleField *>(fields()[FY_ID]));
        visitor.visit(mCx,                        static_cast<const corecvs::DoubleField *>(fields()[CX_ID]));
        visitor.visit(mCy,                        static_cast<const corecvs::DoubleField *>(fields()[CY_ID]));
        visitor.visit(mSkew,                      static_cast<const corecvs::DoubleField *>(fields()[SKEW_ID]));
        visitor.visit(mSize,                      static_cast<const corecvs::CompositeField *>(fields()[SIZE_ID]));
        visitor.visit(mDistortedSize,             static_cast<const corecvs::CompositeField *>(fields()[DISTORTEDSIZE_ID]));
    }

    PinholeCameraIntrinsicsBaseParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    PinholeCameraIntrinsicsBaseParameters(
          double fx
        , double fy
        , double cx
        , double cy
        , double skew
        , Vector2dParameters size
        , Vector2dParameters distortedSize
    )
    {
        mFx = fx;
        mFy = fy;
        mCx = cx;
        mCy = cy;
        mSkew = skew;
        mSize = size;
        mDistortedSize = distortedSize;
    }

    /** Exact match comparator **/ 
    bool operator ==(const PinholeCameraIntrinsicsBaseParameters &other) const 
    {
        if ( !(this->mFx == other.mFx)) return false;
        if ( !(this->mFy == other.mFy)) return false;
        if ( !(this->mCx == other.mCx)) return false;
        if ( !(this->mCy == other.mCy)) return false;
        if ( !(this->mSkew == other.mSkew)) return false;
        if ( !(this->mSize == other.mSize)) return false;
        if ( !(this->mDistortedSize == other.mDistortedSize)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, PinholeCameraIntrinsicsBaseParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //PINHOLE_CAMERA_INTRINSICS_BASE_PARAMETERS_H_
