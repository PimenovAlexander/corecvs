#ifndef VECTOR_3D_PARAMETERS_H_
#define VECTOR_3D_PARAMETERS_H_
/**
 * \file vector3dParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from basemock.xml
 */

#include "reflection/reflection.h"
#include "reflection/defaultSetter.h"
#include "reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Vector 3d Parameters 
 * Vector 3d Parameters 
 **/
class Vector3dParameters : public corecvs::BaseReflection<Vector3dParameters>
{
public:
    enum FieldId {
        X_ID,
        Y_ID,
        Z_ID,
        VECTOR_3D_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief x 
     * x 
     */
    double mX;

    /** 
     * \brief y 
     * y 
     */
    double mY;

    /** 
     * \brief z 
     * z 
     */
    double mZ;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double x() const
    {
        return mX;
    }

    double y() const
    {
        return mY;
    }

    double z() const
    {
        return mZ;
    }

    /** Section with setters */
    void setX(double x)
    {
        mX = x;
    }

    void setY(double y)
    {
        mY = y;
    }

    void setZ(double z)
    {
        mZ = z;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mX,                         static_cast<const corecvs::DoubleField *>(fields()[X_ID]));
        visitor.visit(mY,                         static_cast<const corecvs::DoubleField *>(fields()[Y_ID]));
        visitor.visit(mZ,                         static_cast<const corecvs::DoubleField *>(fields()[Z_ID]));
    }

    Vector3dParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    Vector3dParameters(
          double x
        , double y
        , double z
    )
    {
        mX = x;
        mY = y;
        mZ = z;
    }

    /** Exact match comparator **/ 
    bool operator ==(const Vector3dParameters &other) const 
    {
        if ( !(this->mX == other.mX)) return false;
        if ( !(this->mY == other.mY)) return false;
        if ( !(this->mZ == other.mZ)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, Vector3dParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //VECTOR_3D_PARAMETERS_H_
