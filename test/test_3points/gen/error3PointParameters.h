#ifndef ERROR_3_POINT_PARAMETERS_H_
#define ERROR_3_POINT_PARAMETERS_H_
/**
 * \file error3PointParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from param.xml
 */

#include "core/reflection/reflection.h"
#include "core/reflection/defaultSetter.h"
#include "core/reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */
#include "core/xml/generated/vector3dParameters.h"
#include "core/xml/generated/vector2dParameters.h"

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */
#include "./targetType3Point.h"

/**
 * \brief Error 3 Point Parameters 
 * Error 3 Point Parameters 
 **/
class Error3PointParameters : public corecvs::BaseReflection<Error3PointParameters>
{
public:
    enum FieldId {
        SCENE_FILE_NAME_ID,
        STATION_ERROR_SIGMA_ID,
        USE_3RD_POINT_ID,
        POINT_3_ERROR_SIGMA_ID,
        TILTERROR_DEG_ID,
        OBSERVATION_ERROR_ID,
        BASELINE_ID,
        POINT_3_DISTANCE_ID,
        TARGET_TYPE_ID,
        SAMPLING_ITERATIONS_ID,
        POIS_FILE_NAME_ID,
        DISTANCE_ID,
        WALL_ANGLE_DEG_ID,
        WALL_BRICK_STEP_ID,
        WALL_BRICKS_ID,
        IMAGE_SIZE_ID,
        IMAGE_SCALE_ID,
        IMAGE_SHIFT_ID,
        RANDOM_SEED_ID,
        ERROR_3_POINT_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief scene file name 
     * scene file name 
     */
    std::string mSceneFileName;

    /** 
     * \brief Station Error Sigma 
     * Station Error Sigma 
     */
    Vector3dParameters mStationErrorSigma;

    /** 
     * \brief use 3rd point 
     * use 3rd point 
     */
    bool mUse3rdPoint;

    /** 
     * \brief Point 3 Error Sigma 
     * Point 3 Error Sigma 
     */
    Vector3dParameters mPoint3ErrorSigma;

    /** 
     * \brief tiltError deg 
     * tiltError deg 
     */
    double mTiltErrorDeg;

    /** 
     * \brief Observation Error 
     * Observation Error (px) 
     */
    Vector2dParameters mObservationError;

    /** 
     * \brief baseline 
     * baseline 
     */
    double mBaseline;

    /** 
     * \brief point 3 distance 
     * point 3 distance 
     */
    double mPoint3Distance;

    /** 
     * \brief target type 
     * target type 
     */
    int mTargetType;

    /** 
     * \brief sampling iterations 
     * sampling iterations 
     */
    int mSamplingIterations;

    /** 
     * \brief pois file name 
     * pois file name 
     */
    std::string mPoisFileName;

    /** 
     * \brief distance 
     * distance 
     */
    double mDistance;

    /** 
     * \brief wall angle deg 
     * wall angle deg 
     */
    double mWallAngleDeg;

    /** 
     * \brief wall brick step 
     * wall brick step 
     */
    double mWallBrickStep;

    /** 
     * \brief wall bricks 
     * wall bricks 
     */
    int mWallBricks;

    /** 
     * \brief image size 
     * image size 
     */
    int mImageSize;

    /** 
     * \brief image scale 
     * image scale 
     */
    double mImageScale;

    /** 
     * \brief image shift 
     * image shift 
     */
    Vector3dParameters mImageShift;

    /** 
     * \brief random seed 
     * random seed 
     */
    int mRandomSeed;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    std::string sceneFileName() const
    {
        return mSceneFileName;
    }

    Vector3dParameters stationErrorSigma() const
    {
        return mStationErrorSigma;
    }

    bool use3rdPoint() const
    {
        return mUse3rdPoint;
    }

    Vector3dParameters point3ErrorSigma() const
    {
        return mPoint3ErrorSigma;
    }

    double tiltErrorDeg() const
    {
        return mTiltErrorDeg;
    }

    Vector2dParameters observationError() const
    {
        return mObservationError;
    }

    double baseline() const
    {
        return mBaseline;
    }

    double point3Distance() const
    {
        return mPoint3Distance;
    }

    TargetType3Point::TargetType3Point targetType() const
    {
        return static_cast<TargetType3Point::TargetType3Point>(mTargetType);
    }

    int samplingIterations() const
    {
        return mSamplingIterations;
    }

    std::string poisFileName() const
    {
        return mPoisFileName;
    }

    double distance() const
    {
        return mDistance;
    }

    double wallAngleDeg() const
    {
        return mWallAngleDeg;
    }

    double wallBrickStep() const
    {
        return mWallBrickStep;
    }

    int wallBricks() const
    {
        return mWallBricks;
    }

    int imageSize() const
    {
        return mImageSize;
    }

    double imageScale() const
    {
        return mImageScale;
    }

    Vector3dParameters imageShift() const
    {
        return mImageShift;
    }

    int randomSeed() const
    {
        return mRandomSeed;
    }

    /** Section with setters */
    void setSceneFileName(std::string sceneFileName)
    {
        mSceneFileName = sceneFileName;
    }

    void setStationErrorSigma(Vector3dParameters const &stationErrorSigma)
    {
        mStationErrorSigma = stationErrorSigma;
    }

    void setUse3rdPoint(bool use3rdPoint)
    {
        mUse3rdPoint = use3rdPoint;
    }

    void setPoint3ErrorSigma(Vector3dParameters const &point3ErrorSigma)
    {
        mPoint3ErrorSigma = point3ErrorSigma;
    }

    void setTiltErrorDeg(double tiltErrorDeg)
    {
        mTiltErrorDeg = tiltErrorDeg;
    }

    void setObservationError(Vector2dParameters const &observationError)
    {
        mObservationError = observationError;
    }

    void setBaseline(double baseline)
    {
        mBaseline = baseline;
    }

    void setPoint3Distance(double point3Distance)
    {
        mPoint3Distance = point3Distance;
    }

    void setTargetType(TargetType3Point::TargetType3Point targetType)
    {
        mTargetType = targetType;
    }

    void setSamplingIterations(int samplingIterations)
    {
        mSamplingIterations = samplingIterations;
    }

    void setPoisFileName(std::string poisFileName)
    {
        mPoisFileName = poisFileName;
    }

    void setDistance(double distance)
    {
        mDistance = distance;
    }

    void setWallAngleDeg(double wallAngleDeg)
    {
        mWallAngleDeg = wallAngleDeg;
    }

    void setWallBrickStep(double wallBrickStep)
    {
        mWallBrickStep = wallBrickStep;
    }

    void setWallBricks(int wallBricks)
    {
        mWallBricks = wallBricks;
    }

    void setImageSize(int imageSize)
    {
        mImageSize = imageSize;
    }

    void setImageScale(double imageScale)
    {
        mImageScale = imageScale;
    }

    void setImageShift(Vector3dParameters const &imageShift)
    {
        mImageShift = imageShift;
    }

    void setRandomSeed(int randomSeed)
    {
        mRandomSeed = randomSeed;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mSceneFileName,             static_cast<const corecvs::StringField *>(fields()[SCENE_FILE_NAME_ID]));
        visitor.visit(mStationErrorSigma,         static_cast<const corecvs::CompositeField *>(fields()[STATION_ERROR_SIGMA_ID]));
        visitor.visit(mUse3rdPoint,               static_cast<const corecvs::BoolField *>(fields()[USE_3RD_POINT_ID]));
        visitor.visit(mPoint3ErrorSigma,          static_cast<const corecvs::CompositeField *>(fields()[POINT_3_ERROR_SIGMA_ID]));
        visitor.visit(mTiltErrorDeg,              static_cast<const corecvs::DoubleField *>(fields()[TILTERROR_DEG_ID]));
        visitor.visit(mObservationError,          static_cast<const corecvs::CompositeField *>(fields()[OBSERVATION_ERROR_ID]));
        visitor.visit(mBaseline,                  static_cast<const corecvs::DoubleField *>(fields()[BASELINE_ID]));
        visitor.visit(mPoint3Distance,            static_cast<const corecvs::DoubleField *>(fields()[POINT_3_DISTANCE_ID]));
        visitor.visit((int &)mTargetType,         static_cast<const corecvs::EnumField *>(fields()[TARGET_TYPE_ID]));
        visitor.visit(mSamplingIterations,        static_cast<const corecvs::IntField *>(fields()[SAMPLING_ITERATIONS_ID]));
        visitor.visit(mPoisFileName,              static_cast<const corecvs::StringField *>(fields()[POIS_FILE_NAME_ID]));
        visitor.visit(mDistance,                  static_cast<const corecvs::DoubleField *>(fields()[DISTANCE_ID]));
        visitor.visit(mWallAngleDeg,              static_cast<const corecvs::DoubleField *>(fields()[WALL_ANGLE_DEG_ID]));
        visitor.visit(mWallBrickStep,             static_cast<const corecvs::DoubleField *>(fields()[WALL_BRICK_STEP_ID]));
        visitor.visit(mWallBricks,                static_cast<const corecvs::IntField *>(fields()[WALL_BRICKS_ID]));
        visitor.visit(mImageSize,                 static_cast<const corecvs::IntField *>(fields()[IMAGE_SIZE_ID]));
        visitor.visit(mImageScale,                static_cast<const corecvs::DoubleField *>(fields()[IMAGE_SCALE_ID]));
        visitor.visit(mImageShift,                static_cast<const corecvs::CompositeField *>(fields()[IMAGE_SHIFT_ID]));
        visitor.visit(mRandomSeed,                static_cast<const corecvs::IntField *>(fields()[RANDOM_SEED_ID]));
    }

    Error3PointParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    Error3PointParameters(
          std::string sceneFileName
        , Vector3dParameters stationErrorSigma
        , bool use3rdPoint
        , Vector3dParameters point3ErrorSigma
        , double tiltErrorDeg
        , Vector2dParameters observationError
        , double baseline
        , double point3Distance
        , TargetType3Point::TargetType3Point targetType
        , int samplingIterations
        , std::string poisFileName
        , double distance
        , double wallAngleDeg
        , double wallBrickStep
        , int wallBricks
        , int imageSize
        , double imageScale
        , Vector3dParameters imageShift
        , int randomSeed
    )
    {
        mSceneFileName = sceneFileName;
        mStationErrorSigma = stationErrorSigma;
        mUse3rdPoint = use3rdPoint;
        mPoint3ErrorSigma = point3ErrorSigma;
        mTiltErrorDeg = tiltErrorDeg;
        mObservationError = observationError;
        mBaseline = baseline;
        mPoint3Distance = point3Distance;
        mTargetType = targetType;
        mSamplingIterations = samplingIterations;
        mPoisFileName = poisFileName;
        mDistance = distance;
        mWallAngleDeg = wallAngleDeg;
        mWallBrickStep = wallBrickStep;
        mWallBricks = wallBricks;
        mImageSize = imageSize;
        mImageScale = imageScale;
        mImageShift = imageShift;
        mRandomSeed = randomSeed;
    }

    /** Exact match comparator **/ 
    bool operator ==(const Error3PointParameters &other) const 
    {
        if ( !(this->mSceneFileName == other.mSceneFileName)) return false;
        if ( !(this->mStationErrorSigma == other.mStationErrorSigma)) return false;
        if ( !(this->mUse3rdPoint == other.mUse3rdPoint)) return false;
        if ( !(this->mPoint3ErrorSigma == other.mPoint3ErrorSigma)) return false;
        if ( !(this->mTiltErrorDeg == other.mTiltErrorDeg)) return false;
        if ( !(this->mObservationError == other.mObservationError)) return false;
        if ( !(this->mBaseline == other.mBaseline)) return false;
        if ( !(this->mPoint3Distance == other.mPoint3Distance)) return false;
        if ( !(this->mTargetType == other.mTargetType)) return false;
        if ( !(this->mSamplingIterations == other.mSamplingIterations)) return false;
        if ( !(this->mPoisFileName == other.mPoisFileName)) return false;
        if ( !(this->mDistance == other.mDistance)) return false;
        if ( !(this->mWallAngleDeg == other.mWallAngleDeg)) return false;
        if ( !(this->mWallBrickStep == other.mWallBrickStep)) return false;
        if ( !(this->mWallBricks == other.mWallBricks)) return false;
        if ( !(this->mImageSize == other.mImageSize)) return false;
        if ( !(this->mImageScale == other.mImageScale)) return false;
        if ( !(this->mImageShift == other.mImageShift)) return false;
        if ( !(this->mRandomSeed == other.mRandomSeed)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, Error3PointParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //ERROR_3_POINT_PARAMETERS_H_
