/**
 * \file vector3dParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from param.xml
 */

#include <vector>
#include <stddef.h>
#include "vector3dParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
#if 0
template<>
Reflection BaseReflection<Vector3dParameters>::reflection = Reflection();
template<>
int BaseReflection<Vector3dParameters>::dummy = Vector3dParameters::staticInit();
#endif
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int Vector3dParameters::staticInit(corecvs::Reflection *toFill)
{
    if (toFill == NULL || toFill->objectSize != 0) {
        SYNC_PRINT(("staticInit(): Contract Violation in <Vector3dParameters>\n"));
         return -1;
    }

    toFill->name = ReflectionNaming(
        "Vector 3d Parameters",
        "Vector 3d Parameters",
        ""
    );

     toFill->objectSize = sizeof(Vector3dParameters);
     

    DoubleField* field0 = new DoubleField
        (
          Vector3dParameters::X_ID,
          offsetof(Vector3dParameters, mX),
          0,
          "X",
          "X",
          "X",
          true,
         -50000,
         50000,
         1
        );
    field0->widgetHint=BaseField::SPIN_BOX;
    field0->precision=6;
    toFill->fields.push_back(field0);
    /*  */ 
    DoubleField* field1 = new DoubleField
        (
          Vector3dParameters::Y_ID,
          offsetof(Vector3dParameters, mY),
          0,
          "Y",
          "Y",
          "Y",
          true,
         -50000,
         50000,
         1
        );
    field1->widgetHint=BaseField::SPIN_BOX;
    field1->precision=6;
    toFill->fields.push_back(field1);
    /*  */ 
    DoubleField* field2 = new DoubleField
        (
          Vector3dParameters::Z_ID,
          offsetof(Vector3dParameters, mZ),
          0,
          "Z",
          "Z",
          "Z",
          true,
         -50000,
         50000,
         1
        );
    field2->widgetHint=BaseField::SPIN_BOX;
    field2->precision=6;
    toFill->fields.push_back(field2);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Vector 3d Parameters")]= toFill;
   return 0;
}
int Vector3dParameters::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


