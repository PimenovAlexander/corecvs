#ifndef ERRORESTIMATORBLOCKBASE_H_
#define ERRORESTIMATORBLOCKBASE_H_
/**
 * \file errorEstimatorBlockBase.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from param.xml
 */

#include "core/reflection/reflection.h"
#include "core/reflection/defaultSetter.h"
#include "core/reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */
#include "./error3PointParameters.h"

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
namespace corecvs {
class FixtureScene;
}
namespace corecvs {
class Mesh3D;
}
namespace corecvs {
class RGB24Buffer;
}
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief ErrorEstimatorBlockBase 
 * ErrorEstimatorBlockBase 
 **/
class ErrorEstimatorBlockBase : public corecvs::BaseReflection<ErrorEstimatorBlockBase>
{
public:
    enum FieldId {
        INSCENE_ID,
        PARAMETERS_ID,
        OUTMESH_ID,
        OUTIMAGE_ID,
        ERRORESTIMATORBLOCKBASE_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief inScene 
     * inScene 
     */
    corecvs::FixtureScene * mInScene;

    /** 
     * \brief parameters 
     * parameters 
     */
    Error3PointParameters mParameters;

    /** 
     * \brief outMesh 
     * outMesh 
     */
    corecvs::Mesh3D * mOutMesh;

    /** 
     * \brief outImage 
     * outImage 
     */
    corecvs::RGB24Buffer * mOutImage;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    corecvs::FixtureScene * inScene() const
    {
        return mInScene;
    }

    Error3PointParameters parameters() const
    {
        return mParameters;
    }

    corecvs::Mesh3D * outMesh() const
    {
        return mOutMesh;
    }

    corecvs::RGB24Buffer * outImage() const
    {
        return mOutImage;
    }

    /** Section with setters */
    void setInScene(corecvs::FixtureScene * inScene)
    {
        mInScene = inScene;
    }

    void setParameters(Error3PointParameters const &parameters)
    {
        mParameters = parameters;
    }

    void setOutMesh(corecvs::Mesh3D * outMesh)
    {
        mOutMesh = outMesh;
    }

    void setOutImage(corecvs::RGB24Buffer * outImage)
    {
        mOutImage = outImage;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit((void * &)mInScene,         static_cast<const corecvs::PointerField *>(fields()[INSCENE_ID]));
        visitor.visit(mParameters,                static_cast<const corecvs::CompositeField *>(fields()[PARAMETERS_ID]));
        visitor.visit((void * &)mOutMesh,         static_cast<const corecvs::PointerField *>(fields()[OUTMESH_ID]));
        visitor.visit((void * &)mOutImage,        static_cast<const corecvs::PointerField *>(fields()[OUTIMAGE_ID]));
    }

    ErrorEstimatorBlockBase()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    ErrorEstimatorBlockBase(
          corecvs::FixtureScene * inScene
        , Error3PointParameters parameters
        , corecvs::Mesh3D * outMesh
        , corecvs::RGB24Buffer * outImage
    )
    {
        mInScene = inScene;
        mParameters = parameters;
        mOutMesh = outMesh;
        mOutImage = outImage;
    }

    /** Exact match comparator **/ 
    bool operator ==(const ErrorEstimatorBlockBase &other) const 
    {
        if ( !(this->mParameters == other.mParameters)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, ErrorEstimatorBlockBase &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //ERRORESTIMATORBLOCKBASE_H_
