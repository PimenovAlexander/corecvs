/**
 * \file error3PointParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from param.xml
 */

#include <vector>
#include <stddef.h>
#include "error3PointParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
#if 0
template<>
Reflection BaseReflection<Error3PointParameters>::reflection = Reflection();
template<>
int BaseReflection<Error3PointParameters>::dummy = Error3PointParameters::staticInit();
#endif
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int Error3PointParameters::staticInit(corecvs::Reflection *toFill)
{
    if (toFill == NULL || toFill->objectSize != 0) {
        SYNC_PRINT(("staticInit(): Contract Violation in <Error3PointParameters>\n"));
         return -1;
    }

    toFill->name = ReflectionNaming(
        "Error 3 Point Parameters",
        "Error 3 Point Parameters",
        ""
    );

     toFill->objectSize = sizeof(Error3PointParameters);
     

    StringField* field0 = new StringField
        (
          Error3PointParameters::SCENE_FILE_NAME_ID,
          offsetof(Error3PointParameters, mSceneFileName),
          "test.data.json",
          "scene file name",
          "scene file name",
          "scene file name"
        );
    toFill->fields.push_back(field0);
    /*  */ 
    CompositeField* field1 = new CompositeField
        (
          Error3PointParameters::STATION_ERROR_SIGMA_ID,
          offsetof(Error3PointParameters, mStationErrorSigma),
          "Station Error Sigma",
          "Vector3dParameters",
          "Station Error Sigma",
          "Station Error Sigma",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Vector 3d Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field1->reflection = it->second;
        } else {
             printf("Reflection Error3PointParameters to the subclass Vector 3d Parameters can't be linked\n");
        }
    }
    toFill->fields.push_back(field1);
    /*  */ 
    BoolField* field2 = new BoolField
        (
          Error3PointParameters::USE_3RD_POINT_ID,
          offsetof(Error3PointParameters, mUse3rdPoint),
          false,
          "use 3rd point",
          "use 3rd point",
          "use 3rd point"
        );
    field2->widgetHint=BaseField::CHECK_BOX;
    toFill->fields.push_back(field2);
    /*  */ 
    CompositeField* field3 = new CompositeField
        (
          Error3PointParameters::POINT_3_ERROR_SIGMA_ID,
          offsetof(Error3PointParameters, mPoint3ErrorSigma),
          "Point 3 Error Sigma",
          "Vector3dParameters",
          "Point 3 Error Sigma",
          "Point 3 Error Sigma",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Vector 3d Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field3->reflection = it->second;
        } else {
             printf("Reflection Error3PointParameters to the subclass Vector 3d Parameters can't be linked\n");
        }
    }
    toFill->fields.push_back(field3);
    /*  */ 
    DoubleField* field4 = new DoubleField
        (
          Error3PointParameters::TILTERROR_DEG_ID,
          offsetof(Error3PointParameters, mTiltErrorDeg),
          0.05,
          "tiltError deg",
          "tiltError deg",
          "tiltError deg",
          true,
         0,
         20000,
         1
        );
    field4->widgetHint=BaseField::SPIN_BOX;
    field4->suffixHint="deg";
    field4->precision=2;
    toFill->fields.push_back(field4);
    /*  */ 
    CompositeField* field5 = new CompositeField
        (
          Error3PointParameters::OBSERVATION_ERROR_ID,
          offsetof(Error3PointParameters, mObservationError),
          "Observation Error",
          "Vector2dParameters",
          "Observation Error",
          "Observation Error (px)",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Vector 2d Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field5->reflection = it->second;
        } else {
             printf("Reflection Error3PointParameters to the subclass Vector 2d Parameters can't be linked\n");
        }
    }
    toFill->fields.push_back(field5);
    /*  */ 
    DoubleField* field6 = new DoubleField
        (
          Error3PointParameters::BASELINE_ID,
          offsetof(Error3PointParameters, mBaseline),
          1.5,
          "baseline",
          "baseline",
          "baseline",
          true,
         0,
         20000,
         1
        );
    field6->widgetHint=BaseField::SPIN_BOX;
    field6->precision=2;
    toFill->fields.push_back(field6);
    /*  */ 
    DoubleField* field7 = new DoubleField
        (
          Error3PointParameters::POINT_3_DISTANCE_ID,
          offsetof(Error3PointParameters, mPoint3Distance),
          10,
          "point 3 distance",
          "point 3 distance",
          "point 3 distance",
          true,
         0,
         20000,
         1
        );
    field7->widgetHint=BaseField::SPIN_BOX;
    field7->precision=2;
    toFill->fields.push_back(field7);
    /*  */ 
    EnumField* field8 = new EnumField
        (
          Error3PointParameters::TARGET_TYPE_ID,
          offsetof(Error3PointParameters, mTargetType),
          0,
          "target type",
          "target type",
          "target type",
          new EnumReflection(3
          , new EnumOption(0,"Single Point")
          , new EnumOption(1,"Wall")
          , new EnumOption(2,"POIS Files")
          )
        );
    field8->widgetHint=BaseField::COMBO_BOX;
    toFill->fields.push_back(field8);
    /*  */ 
    IntField* field9 = new IntField
        (
          Error3PointParameters::SAMPLING_ITERATIONS_ID,
          offsetof(Error3PointParameters, mSamplingIterations),
          1000,
          "sampling iterations",
          "sampling iterations",
          "sampling iterations",
          true,
         0,
         50000,
         1
        );
    toFill->fields.push_back(field9);
    /*  */ 
    StringField* field10 = new StringField
        (
          Error3PointParameters::POIS_FILE_NAME_ID,
          offsetof(Error3PointParameters, mPoisFileName),
          "pois.txt",
          "pois file name",
          "pois file name",
          "pois file name"
        );
    toFill->fields.push_back(field10);
    /*  */ 
    DoubleField* field11 = new DoubleField
        (
          Error3PointParameters::DISTANCE_ID,
          offsetof(Error3PointParameters, mDistance),
          30,
          "distance",
          "distance",
          "distance",
          true,
         -50000,
         50000,
         1
        );
    field11->widgetHint=BaseField::SPIN_BOX;
    field11->precision=6;
    toFill->fields.push_back(field11);
    /*  */ 
    DoubleField* field12 = new DoubleField
        (
          Error3PointParameters::WALL_ANGLE_DEG_ID,
          offsetof(Error3PointParameters, mWallAngleDeg),
          0,
          "wall angle deg",
          "wall angle deg",
          "wall angle deg",
          true,
         -50000,
         50000,
         1
        );
    field12->widgetHint=BaseField::SPIN_BOX;
    field12->suffixHint="deg";
    field12->precision=6;
    toFill->fields.push_back(field12);
    /*  */ 
    DoubleField* field13 = new DoubleField
        (
          Error3PointParameters::WALL_BRICK_STEP_ID,
          offsetof(Error3PointParameters, mWallBrickStep),
          5,
          "wall brick step",
          "wall brick step",
          "wall brick step",
          true,
         -50000,
         50000,
         1
        );
    field13->widgetHint=BaseField::SPIN_BOX;
    field13->precision=6;
    toFill->fields.push_back(field13);
    /*  */ 
    IntField* field14 = new IntField
        (
          Error3PointParameters::WALL_BRICKS_ID,
          offsetof(Error3PointParameters, mWallBricks),
          6,
          "wall bricks",
          "wall bricks",
          "wall bricks",
          true,
         0,
         50000,
         1
        );
    toFill->fields.push_back(field14);
    /*  */ 
    IntField* field15 = new IntField
        (
          Error3PointParameters::IMAGE_SIZE_ID,
          offsetof(Error3PointParameters, mImageSize),
          2000,
          "image size",
          "image size",
          "image size",
          true,
         0,
         50000,
         1
        );
    toFill->fields.push_back(field15);
    /*  */ 
    DoubleField* field16 = new DoubleField
        (
          Error3PointParameters::IMAGE_SCALE_ID,
          offsetof(Error3PointParameters, mImageScale),
          100,
          "image scale",
          "image scale",
          "image scale",
          true,
         -50000,
         50000,
         1
        );
    field16->widgetHint=BaseField::SPIN_BOX;
    field16->precision=6;
    toFill->fields.push_back(field16);
    /*  */ 
    CompositeField* field17 = new CompositeField
        (
          Error3PointParameters::IMAGE_SHIFT_ID,
          offsetof(Error3PointParameters, mImageShift),
          "image shift",
          "Vector3dParameters",
          "image shift",
          "image shift",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Vector 3d Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field17->reflection = it->second;
        } else {
             printf("Reflection Error3PointParameters to the subclass Vector 3d Parameters can't be linked\n");
        }
    }
    toFill->fields.push_back(field17);
    /*  */ 
    IntField* field18 = new IntField
        (
          Error3PointParameters::RANDOM_SEED_ID,
          offsetof(Error3PointParameters, mRandomSeed),
          0,
          "random seed",
          "random seed",
          "random seed",
          true,
         0,
         999999,
         1
        );
    toFill->fields.push_back(field18);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Error 3 Point Parameters")]= toFill;
   return 0;
}
int Error3PointParameters::relinkCompositeFields()
{
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Vector 3d Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[1]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection Error3PointParameters to the subclass Vector 3d Parameters can't be linked\n");
        }
    }
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Vector 3d Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[3]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection Error3PointParameters to the subclass Vector 3d Parameters can't be linked\n");
        }
    }
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Vector 2d Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[5]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection Error3PointParameters to the subclass Vector 2d Parameters can't be linked\n");
        }
    }
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Vector 3d Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[17]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection Error3PointParameters to the subclass Vector 3d Parameters can't be linked\n");
        }
    }
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


