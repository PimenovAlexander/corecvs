/**
 * \file errorEstimatorBlockBase.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from param.xml
 */

#include <vector>
#include <stddef.h>
#include "errorEstimatorBlockBase.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
#if 0
template<>
Reflection BaseReflection<ErrorEstimatorBlockBase>::reflection = Reflection();
template<>
int BaseReflection<ErrorEstimatorBlockBase>::dummy = ErrorEstimatorBlockBase::staticInit();
#endif
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int ErrorEstimatorBlockBase::staticInit(corecvs::Reflection *toFill)
{
    if (toFill == NULL || toFill->objectSize != 0) {
        SYNC_PRINT(("staticInit(): Contract Violation in <ErrorEstimatorBlockBase>\n"));
         return -1;
    }

    toFill->name = ReflectionNaming(
        "ErrorEstimatorBlockBase",
        "ErrorEstimatorBlockBase",
        ""
    );

     toFill->objectSize = sizeof(ErrorEstimatorBlockBase);
     

    PointerField* field0 = new PointerField
        (
          ErrorEstimatorBlockBase::INSCENE_ID,
          offsetof(ErrorEstimatorBlockBase, mInScene),
          NULL,
          "inScene",
          "inScene",
          "inScene",
          "corecvs::FixtureScene"
        );
    toFill->fields.push_back(field0);
    /*  */ 
    CompositeField* field1 = new CompositeField
        (
          ErrorEstimatorBlockBase::PARAMETERS_ID,
          offsetof(ErrorEstimatorBlockBase, mParameters),
          "parameters",
          "Error3PointParameters",
          "parameters",
          "parameters",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Error 3 Point Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field1->reflection = it->second;
        } else {
             printf("Reflection ErrorEstimatorBlockBase to the subclass Error 3 Point Parameters can't be linked\n");
        }
    }
    toFill->fields.push_back(field1);
    /*  */ 
    PointerField* field2 = new PointerField
        (
          ErrorEstimatorBlockBase::OUTMESH_ID,
          offsetof(ErrorEstimatorBlockBase, mOutMesh),
          NULL,
          "outMesh",
          "outMesh",
          "outMesh",
          "corecvs::Mesh3D"
        );
    toFill->fields.push_back(field2);
    /*  */ 
    PointerField* field3 = new PointerField
        (
          ErrorEstimatorBlockBase::OUTIMAGE_ID,
          offsetof(ErrorEstimatorBlockBase, mOutImage),
          NULL,
          "outImage",
          "outImage",
          "outImage",
          "corecvs::RGB24Buffer"
        );
    toFill->fields.push_back(field3);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("ErrorEstimatorBlockBase")]= toFill;
   return 0;
}
int ErrorEstimatorBlockBase::relinkCompositeFields()
{
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Error 3 Point Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[1]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection ErrorEstimatorBlockBase to the subclass Error 3 Point Parameters can't be linked\n");
        }
    }
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


