/**
 * \file chessBoardCornerDetectorParamsBaseControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "chessBoardCornerDetectorParamsBaseControlWidget.h"
#include "ui_chessBoardCornerDetectorParamsBaseControlWidget.h"
#include <memory>
#include "visitors/qSettingsGetter.h"
#include "visitors/qSettingsSetter.h"


ChessBoardCornerDetectorParamsBaseControlWidget::ChessBoardCornerDetectorParamsBaseControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::ChessBoardCornerDetectorParamsBaseControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->produceDebugCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->floatSpeedupCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->normalizePercentileSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->sectorSizeDegSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->histogramBinsSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->minAngleDegSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->neighborhoodSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->gradThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->orientationInlierThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->inlierDistanceThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->updateThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->scoreThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->nRoundsSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->meanshiftBandwidthSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->nmsLocalitySpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->nmsThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->patternRadius, SIGNAL(valueChanged()), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->patternStartAngleDeg, SIGNAL(valueChanged()), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->cornerScores, SIGNAL(valueChanged()), this, SIGNAL(paramsChanged()));
}

ChessBoardCornerDetectorParamsBaseControlWidget::~ChessBoardCornerDetectorParamsBaseControlWidget()
{

    delete mUi;
}

void ChessBoardCornerDetectorParamsBaseControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<ChessBoardCornerDetectorParamsBase> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void ChessBoardCornerDetectorParamsBaseControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<ChessBoardCornerDetectorParamsBase>(createParameters()), rootPath);
}

void ChessBoardCornerDetectorParamsBaseControlWidget::getParameters(ChessBoardCornerDetectorParamsBase& params) const
{
    params = *std::unique_ptr<ChessBoardCornerDetectorParamsBase>(createParameters());
}


ChessBoardCornerDetectorParamsBase *ChessBoardCornerDetectorParamsBaseControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new ChessBoardCornerDetectorParamsBase(
          mUi->produceDebugCheckBox->isChecked()
        , mUi->floatSpeedupCheckBox->isChecked()
        , mUi->normalizePercentileSpinBox->value()
        , mUi->sectorSizeDegSpinBox->value()
        , mUi->histogramBinsSpinBox->value()
        , mUi->minAngleDegSpinBox->value()
        , mUi->neighborhoodSpinBox->value()
        , mUi->gradThresholdSpinBox->value()
        , mUi->orientationInlierThresholdSpinBox->value()
        , mUi->inlierDistanceThresholdSpinBox->value()
        , mUi->updateThresholdSpinBox->value()
        , mUi->scoreThresholdSpinBox->value()
        , mUi->nRoundsSpinBox->value()
        , mUi->meanshiftBandwidthSpinBox->value()
        , mUi->nmsLocalitySpinBox->value()
        , mUi->nmsThresholdSpinBox->value()
        , mUi->patternRadius->value()
        , mUi->patternStartAngleDeg->value()
        , mUi->cornerScores->value()
    );
}

void ChessBoardCornerDetectorParamsBaseControlWidget::setParameters(const ChessBoardCornerDetectorParamsBase &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->produceDebugCheckBox->setChecked(input.produceDebug());
    mUi->floatSpeedupCheckBox->setChecked(input.floatSpeedup());
    mUi->normalizePercentileSpinBox->setValue(input.normalizePercentile());
    mUi->sectorSizeDegSpinBox->setValue(input.sectorSizeDeg());
    mUi->histogramBinsSpinBox->setValue(input.histogramBins());
    mUi->minAngleDegSpinBox->setValue(input.minAngleDeg());
    mUi->neighborhoodSpinBox->setValue(input.neighborhood());
    mUi->gradThresholdSpinBox->setValue(input.gradThreshold());
    mUi->orientationInlierThresholdSpinBox->setValue(input.orientationInlierThreshold());
    mUi->inlierDistanceThresholdSpinBox->setValue(input.inlierDistanceThreshold());
    mUi->updateThresholdSpinBox->setValue(input.updateThreshold());
    mUi->scoreThresholdSpinBox->setValue(input.scoreThreshold());
    mUi->nRoundsSpinBox->setValue(input.nRounds());
    mUi->meanshiftBandwidthSpinBox->setValue(input.meanshiftBandwidth());
    mUi->nmsLocalitySpinBox->setValue(input.nmsLocality());
    mUi->nmsThresholdSpinBox->setValue(input.nmsThreshold());
    mUi->patternRadius->setValue(input.patternRadius());
    mUi->patternStartAngleDeg->setValue(input.patternStartAngleDeg());
    mUi->cornerScores->setValue(input.cornerScores());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void ChessBoardCornerDetectorParamsBaseControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    ChessBoardCornerDetectorParamsBase *inputCasted = static_cast<ChessBoardCornerDetectorParamsBase *>(input);
    setParameters(*inputCasted);
}
