/**
 * \file lineDistortionEstimatorParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "lineDistortionEstimatorParametersControlWidget.h"
#include "ui_lineDistortionEstimatorParametersControlWidget.h"
#include <memory>
#include "visitors/qSettingsGetter.h"
#include "visitors/qSettingsSetter.h"


LineDistortionEstimatorParametersControlWidget::LineDistortionEstimatorParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::LineDistortionEstimatorParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->costAlgorithmComboBox, SIGNAL(currentIndexChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->iterationNumberSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->polynomDegreeSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->simpleJacobianCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->evenPowersOnlyCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->estimateTangentCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->estimateCenterCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
}

LineDistortionEstimatorParametersControlWidget::~LineDistortionEstimatorParametersControlWidget()
{

    delete mUi;
}

void LineDistortionEstimatorParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<LineDistortionEstimatorParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void LineDistortionEstimatorParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<LineDistortionEstimatorParameters>(createParameters()), rootPath);
}

void LineDistortionEstimatorParametersControlWidget::getParameters(LineDistortionEstimatorParameters& params) const
{
    params = *std::unique_ptr<LineDistortionEstimatorParameters>(createParameters());
}


LineDistortionEstimatorParameters *LineDistortionEstimatorParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new LineDistortionEstimatorParameters(
          static_cast<LineDistortionEstimatorCost::LineDistortionEstimatorCost>(mUi->costAlgorithmComboBox->currentIndex())
        , mUi->iterationNumberSpinBox->value()
        , mUi->polynomDegreeSpinBox->value()
        , mUi->simpleJacobianCheckBox->isChecked()
        , mUi->evenPowersOnlyCheckBox->isChecked()
        , mUi->estimateTangentCheckBox->isChecked()
        , mUi->estimateCenterCheckBox->isChecked()
    );
}

void LineDistortionEstimatorParametersControlWidget::setParameters(const LineDistortionEstimatorParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->costAlgorithmComboBox->setCurrentIndex(input.costAlgorithm());
    mUi->iterationNumberSpinBox->setValue(input.iterationNumber());
    mUi->polynomDegreeSpinBox->setValue(input.polynomDegree());
    mUi->simpleJacobianCheckBox->setChecked(input.simpleJacobian());
    mUi->evenPowersOnlyCheckBox->setChecked(input.evenPowersOnly());
    mUi->estimateTangentCheckBox->setChecked(input.estimateTangent());
    mUi->estimateCenterCheckBox->setChecked(input.estimateCenter());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void LineDistortionEstimatorParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    LineDistortionEstimatorParameters *inputCasted = static_cast<LineDistortionEstimatorParameters *>(input);
    setParameters(*inputCasted);
}
