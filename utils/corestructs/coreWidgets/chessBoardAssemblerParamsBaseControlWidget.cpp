/**
 * \file chessBoardAssemblerParamsBaseControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "chessBoardAssemblerParamsBaseControlWidget.h"
#include "ui_chessBoardAssemblerParamsBaseControlWidget.h"
#include <memory>
#include "visitors/qSettingsGetter.h"
#include "visitors/qSettingsSetter.h"


ChessBoardAssemblerParamsBaseControlWidget::ChessBoardAssemblerParamsBaseControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::ChessBoardAssemblerParamsBaseControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->seedThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->seedTgPenaltySpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->conservativitySpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->costThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->minSeedDistanceSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->hypothesisDimensionsSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->kdtreeCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->hypothesisDimFirstSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->hypothesisDimSecondSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
}

ChessBoardAssemblerParamsBaseControlWidget::~ChessBoardAssemblerParamsBaseControlWidget()
{

    delete mUi;
}

void ChessBoardAssemblerParamsBaseControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<ChessBoardAssemblerParamsBase> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void ChessBoardAssemblerParamsBaseControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<ChessBoardAssemblerParamsBase>(createParameters()), rootPath);
}

void ChessBoardAssemblerParamsBaseControlWidget::getParameters(ChessBoardAssemblerParamsBase& params) const
{
    params = *std::unique_ptr<ChessBoardAssemblerParamsBase>(createParameters());
}


ChessBoardAssemblerParamsBase *ChessBoardAssemblerParamsBaseControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new ChessBoardAssemblerParamsBase(
          mUi->seedThresholdSpinBox->value()
        , mUi->seedTgPenaltySpinBox->value()
        , mUi->conservativitySpinBox->value()
        , mUi->costThresholdSpinBox->value()
        , mUi->minSeedDistanceSpinBox->value()
        , mUi->hypothesisDimensionsSpinBox->value()
        , mUi->kdtreeCheckBox->isChecked()
        , mUi->hypothesisDimFirstSpinBox->value()
        , mUi->hypothesisDimSecondSpinBox->value()
    );
}

void ChessBoardAssemblerParamsBaseControlWidget::setParameters(const ChessBoardAssemblerParamsBase &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->seedThresholdSpinBox->setValue(input.seedThreshold());
    mUi->seedTgPenaltySpinBox->setValue(input.seedTgPenalty());
    mUi->conservativitySpinBox->setValue(input.conservativity());
    mUi->costThresholdSpinBox->setValue(input.costThreshold());
    mUi->minSeedDistanceSpinBox->setValue(input.minSeedDistance());
    mUi->hypothesisDimensionsSpinBox->setValue(input.hypothesisDimensions());
    mUi->kdtreeCheckBox->setChecked(input.kdtree());
    mUi->hypothesisDimFirstSpinBox->setValue(input.hypothesisDimFirst());
    mUi->hypothesisDimSecondSpinBox->setValue(input.hypothesisDimSecond());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void ChessBoardAssemblerParamsBaseControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    ChessBoardAssemblerParamsBase *inputCasted = static_cast<ChessBoardAssemblerParamsBase *>(input);
    setParameters(*inputCasted);
}
