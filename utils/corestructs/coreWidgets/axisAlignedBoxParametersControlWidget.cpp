/**
 * \file axisAlignedBoxParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "axisAlignedBoxParametersControlWidget.h"
#include "ui_axisAlignedBoxParametersControlWidget.h"
#include <memory>
#include "visitors/qSettingsGetter.h"
#include "visitors/qSettingsSetter.h"


AxisAlignedBoxParametersControlWidget::AxisAlignedBoxParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::AxisAlignedBoxParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->xSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->ySpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->zSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->widthSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->heightSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->depthSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
}

AxisAlignedBoxParametersControlWidget::~AxisAlignedBoxParametersControlWidget()
{

    delete mUi;
}

void AxisAlignedBoxParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<AxisAlignedBoxParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void AxisAlignedBoxParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<AxisAlignedBoxParameters>(createParameters()), rootPath);
}

void AxisAlignedBoxParametersControlWidget::getParameters(AxisAlignedBoxParameters& params) const
{
    params = *std::unique_ptr<AxisAlignedBoxParameters>(createParameters());
}


AxisAlignedBoxParameters *AxisAlignedBoxParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new AxisAlignedBoxParameters(
          mUi->xSpinBox->value()
        , mUi->ySpinBox->value()
        , mUi->zSpinBox->value()
        , mUi->widthSpinBox->value()
        , mUi->heightSpinBox->value()
        , mUi->depthSpinBox->value()
    );
}

void AxisAlignedBoxParametersControlWidget::setParameters(const AxisAlignedBoxParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->xSpinBox->setValue(input.x());
    mUi->ySpinBox->setValue(input.y());
    mUi->zSpinBox->setValue(input.z());
    mUi->widthSpinBox->setValue(input.width());
    mUi->heightSpinBox->setValue(input.height());
    mUi->depthSpinBox->setValue(input.depth());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void AxisAlignedBoxParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    AxisAlignedBoxParameters *inputCasted = static_cast<AxisAlignedBoxParameters *>(input);
    setParameters(*inputCasted);
}
