/**
 * \file rgbColorParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "rgbColorParametersControlWidget.h"
#include "ui_rgbColorParametersControlWidget.h"
#include <memory>
#include "visitors/qSettingsGetter.h"
#include "visitors/qSettingsSetter.h"


RgbColorParametersControlWidget::RgbColorParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::RgbColorParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->rSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->gSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
}

RgbColorParametersControlWidget::~RgbColorParametersControlWidget()
{

    delete mUi;
}

void RgbColorParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<RgbColorParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void RgbColorParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<RgbColorParameters>(createParameters()), rootPath);
}

void RgbColorParametersControlWidget::getParameters(RgbColorParameters& params) const
{
    params = *std::unique_ptr<RgbColorParameters>(createParameters());
}


RgbColorParameters *RgbColorParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new RgbColorParameters(
          mUi->rSpinBox->value()
        , mUi->gSpinBox->value()
        , mUi->bSpinBox->value()
    );
}

void RgbColorParametersControlWidget::setParameters(const RgbColorParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->rSpinBox->setValue(input.r());
    mUi->gSpinBox->setValue(input.g());
    mUi->bSpinBox->setValue(input.b());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void RgbColorParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    RgbColorParameters *inputCasted = static_cast<RgbColorParameters *>(input);
    setParameters(*inputCasted);
}
