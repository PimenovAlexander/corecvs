/**
 * \file operationParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "operationParametersControlWidget.h"
#include "ui_operationParametersControlWidget.h"
#include <memory>
#include "visitors/qSettingsGetter.h"
#include "visitors/qSettingsSetter.h"


OperationParametersControlWidget::OperationParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : FilterParametersControlWidgetBase(parent)
    , mUi(new Ui::OperationParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->operationComboBox, SIGNAL(currentIndexChanged(int)), this, SIGNAL(paramsChanged()));
}

OperationParametersControlWidget::~OperationParametersControlWidget()
{

    delete mUi;
}

void OperationParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<OperationParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void OperationParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<OperationParameters>(createParameters()), rootPath);
}

void OperationParametersControlWidget::getParameters(OperationParameters& params) const
{
    params = *std::unique_ptr<OperationParameters>(createParameters());
}


OperationParameters *OperationParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new OperationParameters(
          static_cast<Operation::Operation>(mUi->operationComboBox->currentIndex())
    );
}

void OperationParametersControlWidget::setParameters(const OperationParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->operationComboBox->setCurrentIndex(input.operation());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void OperationParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    OperationParameters *inputCasted = static_cast<OperationParameters *>(input);
    setParameters(*inputCasted);
}
