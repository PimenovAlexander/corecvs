/**
 * \file bitSelectorParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "bitSelectorParametersControlWidget.h"
#include "ui_bitSelectorParametersControlWidget.h"
#include <memory>
#include "visitors/qSettingsGetter.h"
#include "visitors/qSettingsSetter.h"


BitSelectorParametersControlWidget::BitSelectorParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : FilterParametersControlWidgetBase(parent)
    , mUi(new Ui::BitSelectorParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->shiftSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit0CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit1CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit2CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit3CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit4CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit5CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit6CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit7CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit8CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit9CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit10CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit11CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit12CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit13CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit14CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bit15CheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
}

BitSelectorParametersControlWidget::~BitSelectorParametersControlWidget()
{

    delete mUi;
}

void BitSelectorParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<BitSelectorParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void BitSelectorParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<BitSelectorParameters>(createParameters()), rootPath);
}

void BitSelectorParametersControlWidget::getParameters(BitSelectorParameters& params) const
{
    params = *std::unique_ptr<BitSelectorParameters>(createParameters());
}


BitSelectorParameters *BitSelectorParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new BitSelectorParameters(
          mUi->shiftSpinBox->value()
        , mUi->bit0CheckBox->isChecked()
        , mUi->bit1CheckBox->isChecked()
        , mUi->bit2CheckBox->isChecked()
        , mUi->bit3CheckBox->isChecked()
        , mUi->bit4CheckBox->isChecked()
        , mUi->bit5CheckBox->isChecked()
        , mUi->bit6CheckBox->isChecked()
        , mUi->bit7CheckBox->isChecked()
        , mUi->bit8CheckBox->isChecked()
        , mUi->bit9CheckBox->isChecked()
        , mUi->bit10CheckBox->isChecked()
        , mUi->bit11CheckBox->isChecked()
        , mUi->bit12CheckBox->isChecked()
        , mUi->bit13CheckBox->isChecked()
        , mUi->bit14CheckBox->isChecked()
        , mUi->bit15CheckBox->isChecked()
    );
}

void BitSelectorParametersControlWidget::setParameters(const BitSelectorParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->shiftSpinBox->setValue(input.shift());
    mUi->bit0CheckBox->setChecked(input.bit0());
    mUi->bit1CheckBox->setChecked(input.bit1());
    mUi->bit2CheckBox->setChecked(input.bit2());
    mUi->bit3CheckBox->setChecked(input.bit3());
    mUi->bit4CheckBox->setChecked(input.bit4());
    mUi->bit5CheckBox->setChecked(input.bit5());
    mUi->bit6CheckBox->setChecked(input.bit6());
    mUi->bit7CheckBox->setChecked(input.bit7());
    mUi->bit8CheckBox->setChecked(input.bit8());
    mUi->bit9CheckBox->setChecked(input.bit9());
    mUi->bit10CheckBox->setChecked(input.bit10());
    mUi->bit11CheckBox->setChecked(input.bit11());
    mUi->bit12CheckBox->setChecked(input.bit12());
    mUi->bit13CheckBox->setChecked(input.bit13());
    mUi->bit14CheckBox->setChecked(input.bit14());
    mUi->bit15CheckBox->setChecked(input.bit15());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void BitSelectorParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    BitSelectorParameters *inputCasted = static_cast<BitSelectorParameters *>(input);
    setParameters(*inputCasted);
}
