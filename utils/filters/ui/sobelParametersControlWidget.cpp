/**
 * \file sobelParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "sobelParametersControlWidget.h"
#include "ui_sobelParametersControlWidget.h"
#include <memory>
#include "visitors/qSettingsGetter.h"
#include "visitors/qSettingsSetter.h"


SobelParametersControlWidget::SobelParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : FilterParametersControlWidgetBase(parent)
    , mUi(new Ui::SobelParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->mixingTypeComboBox, SIGNAL(currentIndexChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->horizontalCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->verticalCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
}

SobelParametersControlWidget::~SobelParametersControlWidget()
{

    delete mUi;
}

void SobelParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<SobelParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void SobelParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<SobelParameters>(createParameters()), rootPath);
}

void SobelParametersControlWidget::getParameters(SobelParameters& params) const
{
    params = *std::unique_ptr<SobelParameters>(createParameters());
}


SobelParameters *SobelParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new SobelParameters(
          static_cast<SobelMixingType::SobelMixingType>(mUi->mixingTypeComboBox->currentIndex())
        , mUi->horizontalCheckBox->isChecked()
        , mUi->verticalCheckBox->isChecked()
    );
}

void SobelParametersControlWidget::setParameters(const SobelParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->mixingTypeComboBox->setCurrentIndex(input.mixingType());
    mUi->horizontalCheckBox->setChecked(input.horizontal());
    mUi->verticalCheckBox->setChecked(input.vertical());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void SobelParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    SobelParameters *inputCasted = static_cast<SobelParameters *>(input);
    setParameters(*inputCasted);
}
